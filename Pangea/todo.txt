0) Sin importar que cosa se este haciendo, checkear la memoria del programa, e impedir leaks de memoria!

NOTA: El framerate esta determinado por la cantidad de imagenes por segundo que se muestran en la pantalla. Hay que tener en cuenta
que mucho del rendering es jodidamente INEFICIENTE, por lo que no hay que asustarse si
hay cosas que andan muy lentas, con bajar la cantidad de complejidad grafica va a mejorar mucho. Por ej, con el ejemplo del plano deformable
y la esfera, cambia mucho si las particulas del plano tienen 2 o 5 subdivisiones (se pierden muchos fps)

URGENTE / ME QUEDE EN:
- Colisionador especulativo. Falta arreglar las cuentas pero el algoritmo esta. Creo que es una cuestion de direccion. Por ahora no anda del todo bien.
	Averiguar porque tienen un comportamiento extraño, y porque a veces se superponen y otras se ¿swapean?
	Porque el plano se cae? Porque se intersectan con el plano? no deberia ni pasar eso!! Odio al svn, estaba casi andadno antes... damn.
	Porque cuando chocan parecen hacer algo raro? Analizar con tiempo cada caso.
	No anda bien con el plano. INVESTIGAR CARAJO!



SEMI URGENTE:
- unificar los headers, sacar YA a glut, y empezar a usar glew+sdl desde el vamos.
- Realmente, cada particula tiene que tener un integrador? lo veo mas como que el world tiene que tener un integrador...

BUGS ACTUALES:
- si roto un plano, no colisiona. WTF?
- put del octree. Si se pasa del treshold pero hay elementos con misma posicion, dejarla pasar e incrementar el treshold del nodo. 


********************************************
EVENTS	
********************************************

- Decidir como manejar el focus
- Decidir como manejar la jerarquia de listeners, se pasan los eventos hacia abajo?
- Decidir si usar un buffer para hacer picking por colores, al menos para el mouse event.


********************************************
GRAFICO	
********************************************


- DECISION DE DISEÑO ACTUAL: Si el .obj no tiene normales ni tx, no genera nada! Voy a esperar a implementar VBO's o display lists para ver como es la estructura optima y analizar la mejor opcion
- Armar un DAG node
- Separar texturas de GL y SDL. Hacer clases abstractas y sus impl en gl y sdl (ttf)
- Sistema de luces.  
- Armar un mini sistema de (futuros) materiales.
- Pensar la responsabilidad de MainWindow vs GraphicsEngine, y crear RenderSettings. MainWindow deberia ser abs. 

- REPASAR ENGINE GRAFICO y repensar algunos patrones, mejorar clases, dar mas funcionalidad, etc. 

/ Codigo:
- Usar shared_ptr

/ Eficiencia:
- Levantar texturas a mano, sin usar IMG_Load
- Levantar texto a mano, sin usar SDL_TTF 
- Investigar sobre display lists y vertex buffers - modificar meshes segun eso. 




********************************************
GA E	
********************************************

- Hacer los adapters...
- Consola grafica

********************************************
FISICO
********************************************

-------------------------------
Cosas a fixear, revisar, etc. CORTO PLAZO
-------------------------------

-* Investigar sobre mejores metodos para resolver las colisiones (path tracing y eso, por si hay mega fuerzas jodiendo)
-Interacciones n^2 con octree (como gravedad)
-Analizar parametros optimos de octree dinamico para reducir fps (threshold en particular)
-Ver si hace falta usar shapes en vez de puntos en el octree y tener punteros en cada leaf. No se si es necesario por ahora,
	porque la busqeuda por shape ya resuelve el problema. Esto resolveria el problema de dos objetos con el mismo punto?
-Punteros seguros para fuerzas y particulas. Esto es importante, en particular para los emisores
-Eliminacion de elementos de grupos
-Pasar mas cosas por referencia, en particular las listas. Analizar overhead de datos y minimizarlo
	
-------------------------------
Cosas a agregar CORTO PLAZO
-------------------------------

1) Planos y cubos colisionables de masa infinita (principio de rigid bodies)
2) Intersecciones Cubo-Cubo, Plano-Plano. Tambien, revisar Plano-Esfera y optimizarlo
3) Hard constraints (de la mano de rigidos)
4) Cuerpos rigidos basicos (primitivas, esfera plano cubo). Esto incluye agregar rotacion, lo cual es un bardo por ahora


-------------------------------
Cosas a fixear, revisar, etc. LARGO PLAZO
-------------------------------

1) Usar punteros mas seguros 
2) Destruccion de particulas y fuerzas (va de la mano con ptrs)
3) Analizar RK4 vs otros metodos mas livianos temp.
4) Optimizacion temporal de los algoritmos
5) Testear intervalos temporales y valores de fuerzas y mundo en los que ande bien y rapido ( y sync. con sdl )

-------------------------------
Cosas a agregar LARGO PLAZO
-------------------------------

1) Cuerpos rigidos y deformables complejos (objetos)
2) Fuerzas entre grupos (considerar un grupo como un cuerpo entero)


n!) Nadie sabe que deparara el futuro jajaja